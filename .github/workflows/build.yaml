name: Packer Build AWS AMI

on:
  push:
    branches:
      - main  # Trigger on push to main branch
      - packer
      #- feature-*

  pull_request:
    branches:
      - main
      - packer
      #- feature-* 
    types:
      - closed 

jobs:
  build-ami:
    if: github.event.pull_request.merged == true || github.event_name == 'push'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Packer
        run: |
          curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
          sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
          sudo apt-get update && sudo apt-get install packer -y
          packer --version

      - name: Packer init
        run: packer init .

      - name: Validate Packer template
        run: packer validate create-packer.pkr.hcl

      - name: Build AMI with Packer
        run: |
          AMI_ID=$(packer build -machine-readable create-packer.pkr.hcl | tee output.log | awk -F, '$0 ~/artifact,0,id/ {print $6}')
          echo "AMI_ID=$AMI_ID" >> $GITHUB_ENV
          echo "Built AMI: $AMI_ID"

      - name: Tag AMI
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            TAG="production"
          else
            TAG="testing"
          fi

          aws ec2 create-tags --resources $AMI_ID --tags Key=Environment,Value=$TAG
          echo "Tagged AMI $AMI_ID with '$TAG'"

  deploy-test:
    needs: build-ami
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: us-east-1

    steps:
      - name: Launch EC2 Instance in Test Environment
        run: |
          INSTANCE_ID=$(aws ec2 run-instances \
            --image-id $AMI_ID \
            --count 1 \
            --instance-type t2.micro \
            --key-name packer \
            --security-group-ids sg-01e53755fe2685f05 \
            --subnet-id subnet-0a7f0aad8b71afcbf \
            --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=TestInstance},{Key=Environment,Value=testing}]' \
            --query 'Instances[0].InstanceId' --output text)

          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV
          echo "Deployed Test Instance: $INSTANCE_ID"

      - name: Wait for Instance to be Running
        run: |
          aws ec2 wait instance-running --instance-ids $INSTANCE_ID
          echo "Instance $INSTANCE_ID is now running."